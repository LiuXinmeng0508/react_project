{"version":3,"sources":["ShowTime.js","TodoList/Todoing.js","TodoList/Todoinput.js","TodoList/Todolist.js","request.js","index.js"],"names":["Component","Todoing","this","props","a","className","todo","map","item","idx","key","onClick","delTodo","defaultProps","Todoinput","handleInput","e","keyCode","addTodo","state","val","handleChange","setState","target","name","parseInt","value","n1","n2","onChange","onKeyDown","type","Todolist","addItem","msg","console","log","delItem","splice","ReactDOM","render","document","getElementById","React","createElement"],"mappings":"0PAEsCA,Y,MCAjBC,E,iLACP,IAAD,OACL,OACI,6BACI,uDAASC,KAAKC,MAAMC,GACpB,wBAAIC,UAAU,QAENH,KAAKC,MAAMG,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAAY,wBAAIC,IAAKD,GAAMD,EAAf,OAAwB,4BAAQG,QAAS,WAAK,EAAKR,MAAMS,QAAQH,KAAzC,0B,GAP3CT,aAiBrCC,EAAQY,aAAe,CACnBP,KAAM,CAAC,EAAE,EAAE,GACXF,EAAG,K,YCScU,E,YACjB,aAAc,IAAD,8BACT,+CAMJC,YAAc,SAACC,GACM,KAAdA,EAAEC,SACD,EAAKd,MAAMe,QAAQ,EAAKC,MAAMC,MATzB,EAYbC,aAAe,SAACL,GACZ,EAAKM,SAAL,eACKN,EAAEO,OAAOC,KAAOC,SAAST,EAAEO,OAAOG,UAZvC,EAAKP,MAAQ,CACTQ,GAAI,EACJC,GAAI,GAJC,E,sEAiBH,IAAD,OACL,OACI,6BACI,2BAAOJ,KAAK,KAAKK,SAAU,SAACb,GAAD,OAAK,EAAKK,aAAaL,IAAIU,MAAOxB,KAAKiB,MAAMQ,GAAIG,UAAW,SAACd,GAAD,OAAK,EAAKD,YAAYC,IAAIe,KAAK,SAD1H,IAGI,2BAAOP,KAAK,KAAKK,SAAU,SAACb,GAAD,OAAK,EAAKK,aAAaL,IAAIU,MAAOxB,KAAKiB,MAAMS,GAAIE,UAAW,SAACd,GAAD,OAAK,EAAKD,YAAYC,IAAIe,KAAK,SACtH,2BAAI7B,KAAKiB,MAAMQ,GAAGzB,KAAKiB,MAAMS,IAC7B,qD,GAzBuB5B,aC1BlBgC,E,YACjB,aAAc,IAAD,8BACT,+CAKJC,QAAU,SAACC,GAGP,EAAKZ,SAAS,CACVhB,KAAK,GAAD,mBAAM,EAAKa,MAAMb,MAAjB,CAAsB4B,MAE9BC,QAAQC,IAAIF,IAZH,EAcbG,QAAU,SAACjC,GACP,EAAKe,MAAMb,KAAKgC,OAAOlC,EAAE,GAEzB,IAAIE,EAAI,YAAO,EAAKa,MAAMb,MAC1BA,EAAKgC,OAAOlC,EAAE,GACd,EAAKkB,SAAS,CACVhB,KAAMA,IAEV6B,QAAQC,IAAIhC,IApBZ,EAAKe,MAAQ,CACTb,KAAM,CAAC,EAAE,EAAE,IAHN,E,sEAyBT,OACI,6BACI,kBAAC,EAAD,CAAWY,QAAShB,KAAK+B,UACzB,kBAAC,EAAD,CAASrB,QAASV,KAAKmC,QAAS/B,KAAMJ,KAAKiB,MAAMb,Y,GA7B3BN,a,MCFDA,YCOrCuC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SA4C1CC,IAAMC,cACZ,MACA,CAAC,GAAK,OACN,QACAD,IAAMC,cACF,KACA,CAAC,GAAK,KACN,Y","file":"static/js/main.bc66da94.chunk.js","sourcesContent":["import React,{Component,Fragment} from 'react';\r\n// 类定义组件\r\nexport default class ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString()\r\n        }\r\n        // this.handleClick = this.handleClick.bind(this);\r\n        console.log('constructor',this.props.word);\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n        setTimeout(()=>{\r\n            console.log(1)\r\n            this.setState({\r\n                time: new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        return true;\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getsnapshot');\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('didupdate');\r\n    }\r\n    handleClick = (num,e)=>{\r\n        console.log(num,e);\r\n        console.log('点击成功');\r\n    }\r\n    divClick(num,e){\r\n        console.log(num,e);\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        return (\r\n            <Fragment>\r\n                <div onClick={(ev)=>{this.handleClick(1,ev)}}>\r\n                    {this.state.time}</div>\r\n                <div onClick={this.divClick.bind(this,333)}>hello{this.props.word}</div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n// 默认导出，只能导出一次\r\n// export default ShowTime;\r\n\r\n// 命名导出,可写多个export\r\n// export {ShowTime};","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行{this.props.a}</h1>\r\n                <ul className=\"list\">\r\n                    {\r\n                        this.props.todo.map((item,idx)=><li key={idx}>{item}----<button onClick={()=>{this.props.delTodo(idx)}}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes = {\r\n    todo: PropTypes.array\r\n}\r\nTodoing.defaultProps = {\r\n    todo: [2,3,4],\r\n    a: 100\r\n}","import React, { Component } from 'react'\r\n//子组件---->父组件传递数据，调用子组件时往子组件传递一个函数\r\n// 子组件通过props调用该函数\r\n\r\n//受控组件和非受控组件\r\n\r\n//非受控组件\r\n/* export default class Todoinput extends Component {\r\n\r\n    componentDidMount(){\r\n        console.log(this.inp.value);\r\n    }\r\n    search = ()=>{\r\n        console.log(this.inp.value);\r\n    }\r\n    render(){\r\n        return (<div>\r\n            <input ref={(inp)=>this.inp = inp} type=\"text\"/>\r\n            <button onClick={this.search}>查询</button>\r\n        </div>)\r\n    }\r\n} */\r\n\r\n\r\n\r\n\r\n\r\n//受控组件：value值被react的状态控制\r\n//可以方便拿到input框的值\r\n//实时获取或处理输入的内容\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            n1: 0,\r\n            n2: 0\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(this.state.val);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: parseInt(e.target.value)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input name=\"n1\" onChange={(e)=>this.handleChange(e)} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                +\r\n                <input name=\"n2\" onChange={(e)=>this.handleChange(e)} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                <p>{this.state.n1+this.state.n2}</p>\r\n                <button>查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Todoing from './Todoing';\r\nimport Todoinput from './Todoinput';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo: [1,2,3]\r\n        }\r\n    }\r\n    addItem = (msg)=>{\r\n        // this.state.todo.push(msg)\r\n        // console.log(this.state.todo)\r\n        this.setState({\r\n            todo: [...this.state.todo,msg]\r\n        })\r\n        console.log(msg);\r\n    }\r\n    delItem = (a)=>{\r\n        this.state.todo.splice(a,1);\r\n        //深拷贝\\浅拷贝\r\n        var todo = [...this.state.todo];\r\n        todo.splice(a,1);\r\n        this.setState({\r\n            todo: todo\r\n        })\r\n        console.log(a);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing delTodo={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1',\r\n        {method:'post',body:'{name:123}'}\r\n        )    \r\n            .then((res)=>{\r\n                return res.json();\r\n            })\r\n            .then((res)=>{\r\n                this.setState({\r\n                    data:res.result\r\n                })\r\n                console.log(res);\r\n            })\r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        //     .then((res)=>{\r\n        //         console.log(res);\r\n        //         this.setState({\r\n        //             data: res.data.result\r\n        //         })\r\n        //     })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(\r\n                                <li key={index}>\r\n                                    <h2>{item.album_title}</h2>\r\n                                    <p>{item.author}</p>\r\n                                </li>\r\n                            )\r\n                        )\r\n                    }\r\n                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ShowTime from './ShowTime';\nimport Todolist from './TodoList/Todolist'\nimport Request from './request'\n// 组件交互\n// 父组件--->子组件：调用时在子组件上添加属性\n// 在子组件中通过props获取数据\nReactDOM.render(<Todolist/>,document.getElementById('root'));\n\n\n\n\n// 函数定义组件（无生命周期函数）\n// 当只是渲染结构时\n// function Todo(props){\n//     return (\n//         <div>\n//             {/* 条件渲染 */}\n//             {props.list.length>=6?<h1>todo</h1>:''}\n//             {props.list.length>=5 && <h1>todo</h1>}\n//             <ul>\n//                 {/* 循环渲染 */}\n//                 {\n//                     props.list.map(\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\n//                     )\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// var item = [1,2,3,4,5];\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\n\n\n\n\n\n// react元素创建后不可改变\n// function tick(){\n//     var e = <div>\n//                 <p>当前时间</p>\n//                 <p>当前时间</p>\n//                 <h1>{new Date().toLocaleString()}</h1>;\n//             </div>\n//     ReactDOM.render(e,document.getElementById('root'));\n// }\n// tick();\n// setInterval(tick,1000);\n\n// jsx表达式会被react转成一个对象，类似下面声明的obj对象\nvar ele = React.createElement(\n    'div',\n    {'id':'box'},\n    'hello',\n    React.createElement(\n        'h1',\n        {'id':'h'},\n        'react'\n    )\n);\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: ['hello',{\n            type: 'h1',\n            props: {\n                id: 'h',\n                class: 'h',\n                children: ['react']\n            }\n        }]\n    }\n}\n\n// 自己声明render函数，实现页面渲染\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var fr = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item];\n        }else if(item === 'children'){\n            for(var i=0;i<props[item].length;i++){\n                if(typeof props[item][i] === 'object'){\n                    render(props[item][i],ele);\n                }else{\n                    var txt = document.createTextNode(props[item][i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fr.appendChild(ele);\n    container.appendChild(fr);\n}\n// render(obj,document.getElementById('root'));\n\n// 注意以下性能问题及优化方法\n\n// 加载html文件、浏览器解析html生成DOM树\n// link加载css文件、解析css规则、和DOM树结合生成render tree、浏览器渲染引擎渲染render tree\n\n// 页面回流（重排）：内容改变、大小改变、结构改变\n// 页面重绘：把字体颜色、背景颜色等样式改变\n\n// 1、node.offsetLeft、node.offsetWidth等慎用\n// var root = document.getElementById('root');\n// var width = root.offsetWidth;\n// setInterval(function(){\n//     width += 1\n//     root.style.width = width + 'px';\n// },100)\n\n// display、width、height、font-size等会引起页面回流\n// document.body.style.width = '100px';\n// document.body.style.height = '100px';\n// 2、声明一个css的一个类\n// .change{\n//     width: 100px;\n//     height: 100px;\n// }\n// document.body.className = 'change';\n\n// 3、对节点的操作先用变量代替\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;\n// console.timeEnd('a');\n// 4、文档碎片的概念\n\n//默认导出，只能导出一次\n//export default ShowTime;\n//命名导出，可写多个export\n//export {ShowTime};\n//直接导出\n//export default class ShowTime extends Comeponent{}\n\n//组件交互\n//父组件--->子组件：调用时在子组件上添加属性\n//在子组件中通过props获取数据\n\n"],"sourceRoot":""}